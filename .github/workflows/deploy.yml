# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.  

name: Java CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  remote_host: 121.41.72.174

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package -DskipTests --file pom.xml
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_password }}
        registry: registry.cn-hangzhou.aliyuncs.com
    -
      name: Build and push
      uses: docker/build-push-action@v5
      with:
        registry: registry.cn-hangzhou.aliyuncs.com
        context: ${{ github.workspace	}}
        push: true
        tags: registry.cn-hangzhou.aliyuncs.com/yido/websocket:${{ github.run_id }}
    - name: Deploy service
      uses: appleboy/ssh-action@v1.0.0        
      with:
        host: 121.41.72.174
        username: ${{ secrets.host_username }}
        password: ${{ secrets.host_password }}
        script: |
            echo "$run_id"
            echo "install docker..."
            test -f /opt/idcos-docker/docker-deploy.sh || curl -o /opt/idcos-docker/docker-deploy.sh http://yum.idcos.com/opensource/docker/docker-deploy.sh
            bash /opt/idcos-docker/docker-deploy.sh
            echo "login docker..."
            docker login --username=${{ secrets.docker_username }} --password=${{ secrets.docker_password }} registry.cn-hangzhou.aliyuncs.com
            docker pull registry.cn-hangzhou.aliyuncs.com/yido/websocket:${{ github.run_id }}
            echo "start service...."
            docker run -p 8080:8080 -d registry.cn-hangzhou.aliyuncs.com/yido/websocket:${{ github.run_id }}
